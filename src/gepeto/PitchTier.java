package gepeto;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

import processing.core.PVector;


public class PitchTier {

	// time stored in milliseconds
	protected double startTime, endTime;
	PVector[] points;
	
	 /**
     * Builds a new PitchTier object from a Praat formatted .PitchTier file,
     * trying to guess the file encoding used
     * @param fileName The name of the .TextGrid file to be imported
     **/
    public PitchTier(String fileName) {
        try {
            String encoding = detectEncoding(fileName,false);
            readFile(fileName,encoding,false);
        } catch(Exception e) {
            System.err.println(e);
        }
    }

    /**
     * Adapted from code by Nicolas Audibert
     * Builds a new PitchTier object from a Praat formatted .PitchTier file,
     * trying to guess the file encoding used
     * @param fileName The name of the .TextGrid file to be imported
     * @param verbose Details will be displayed in standard output if set to true
     **/
    public PitchTier(String fileName, boolean verbose) {
        try {
            String encoding = detectEncoding(fileName, verbose);
            readFile(fileName,encoding,verbose);
        } catch(Exception e) {
            System.err.println(e);
        }
    }
	
	/**
	 * Adapted from code by Nicolas Audibert
     * Get the lower bound of the intance
     * @return The starting time in seconds
     **/
    public double getStartTime() {
        return this.startTime;
    }
    
    /**
     * Adapted from code by Nicolas Audibert
     * Get the upper bound of the intance
     * @return The end time in seconds
     **/
    public double getEndTime() {
        return this.endTime;
    }
    
    /**
     * Adapted from code by Nicolas Audibert
     * Get the total duration of the textgrid
     * @return The duration in seconds
     */
    public double getDuration() {
        return this.getEndTime()-this.getStartTime();
    }
	
    public PVector[] getPoints() {
    	return points;
    }
    
    public void print() {
    	for (int i = 0; i < points.length; i++) {
    		System.out.println("time (millis): " + points[i].x + ", freq: " + points[i].y);
    	}
    }

	  /**
     * Adapted from code by Nicolas Audibert
     * Attempts to detect the text encoding scheme used in a .TextGrid file
     * @param fileName The name of the .TextGrid file to be tested
     * @param verbose Details will be displayed in standard output if set to true
     * @return The code of the encoding scheme used in file fileName, or an empty string if the encoding scheme could not be guessed
     */
    private String detectEncoding(String fileName, boolean verbose) {
        String encoding = "";
        try {
            /* Codes of the possible encoding schemes. The encoding scheme used should be one of the first 3 ones for a file generated by Praat */
            String[] textGridEncodingSchemes = {"UTF-16BE", "UTF-8", "US-ASCII", "UTF-16LE", "ISO-8859-1"};
            int i = 0;
            boolean foundEncoding = false;
            while(!foundEncoding && i<textGridEncodingSchemes.length) {
                /* Get the current encoding scheme guess */
                String encodingGuess = textGridEncodingSchemes[i];
                /* Read the first line using this encoding scheme and check its value */
                BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream (fileName), encodingGuess));
                String line=br.readLine();
                br.close();
                if(line.endsWith("File type = \"ooTextFile\"")) {
                    foundEncoding = true;
                    encoding = encodingGuess;
                }
                i++;
            }
            if(foundEncoding) {
                if(verbose)
                    System.out.println("TextGrid " + fileName + " will be decoded as " + encoding);
            }
            else {
                System.err.println("Could not guess encoding scheme of TextGrid " + fileName);
            }
        } catch(Exception e) {
            System.err.println(e);
        }
        return encoding;
    }
    
    /**
     * Adapted from code by Nicolas Audibert
     * Import the information for a .TextGrid file.
     * @param fileName The name of the .TextGrid file to be imported
     * @param encoding The code of the encoding scheme used in file fileName
     * @param verbose Details will be displayed in standard output if set to true
     * @throws IOException
     */
    private void readFile(String fileName, String encoding, boolean verbose) throws IOException {
        
        // BufferedReader br = new BufferedReader(new FileReader(fileName));
        BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream (fileName), encoding));

        // read header information
        String line=br.readLine();
        if(!line.contains("File type = \"ooTextFile\""))
            error(line, fileName);
        line=br.readLine();
        if(!line.startsWith("Object class = \"PitchTier\""))
            error(line, fileName);
        
        br.readLine();
        line=br.readLine();
        StringTokenizer st=new StringTokenizer(line,"= ");
        if(!st.nextToken().equals("xmin"))
            error(line, fileName);
        else this.startTime=Double.parseDouble(st.nextToken());
        line=br.readLine();
        st=new StringTokenizer(line,"= ");
        if(!st.nextToken().equals("xmax"))
            error(line, fileName);
        else this.endTime=Double.parseDouble(st.nextToken());
        
        line=br.readLine();
        if(!line.startsWith("points:"))
            error(line, fileName);
        
        int numPoints;
        st=new StringTokenizer(line,"= ");
        if(!st.nextToken().equals("points:")) {
        	error(line, fileName);
        }	
        if(!st.nextToken().equals("size")) {
            error(line, fileName);
            numPoints=0;
        }
        else
            numPoints=Integer.parseInt(st.nextToken());
        
        if(verbose)
            System.out.println("PitchTier " + fileName + ": "+numPoints+" points, xmin=" + getStartTime() + ", xmax=" + getEndTime());
        
        points = new PVector[numPoints];
        
        for (int i = 1; i <= numPoints; i++) {
        	float num = 0;
        	float val = 0;
        	
        	line = br.readLine();
        	line = br.readLine();
        	st = new StringTokenizer(line, "= ");
        	if(!st.nextToken().equals("number"))
        		error(line, fileName);
        	else 
        		num = Float.parseFloat(st.nextToken());
        	line = br.readLine();
        	st = new StringTokenizer(line, "= ");
        	if(!st.nextToken().equals("value"))	
        		error(line, fileName);
        	else 
        		val = Float.parseFloat(st.nextToken());
        	
      
        	points[i-1] = new PVector(num*1000, (float) hzToMIDI(val));
        }
        br.close();
    }
    
    private double hzToMIDI(float freq) {
    	return 12.0 * Math.log(freq/440.0)/Math.log(2) + 69;
    }
    
    /**
     * Display an error message when failing to read a TextGrid file and exit.
     * @param line String to be displayed.
     * @param fileName Name of the file responsible for the error.
     */
    private void error(String line, String fileName) {
        System.out.println("Wrong format ("+fileName+") : "+line);
        System.exit(1);
    }

}
